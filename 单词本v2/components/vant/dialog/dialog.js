Object.defineProperty(exports, "__esModule", {
    value: true
});

function _extends() {
    _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}

var queue = [];

var Dialog = function Dialog(options) {
    return new Promise(function(resolve, reject) {
        var pages = getCurrentPages();
        var ctx = pages[pages.length - 1];
        var dialog = ctx.selectComponent(options.selector);
        delete options.selector;
        if (dialog) {
            dialog.setData(_extends({
                onCancel: reject,
                onConfirm: resolve
            }, options));
            queue.push(dialog);
        }
    });
};

Dialog.defaultOptions = {
    show: true,
    title: "",
    message: "",
    zIndex: 100,
    overlay: true,
    asyncClose: false,
    selector: "#van-dialog",
    confirmButtonText: "确认",
    cancelButtonText: "取消",
    showConfirmButton: true,
    showCancelButton: false,
    closeOnClickOverlay: false,
    confirmButtonOpenType: ""
};

Dialog.alert = function(options) {
    return Dialog(_extends({}, Dialog.currentOptions, options));
};

Dialog.confirm = function(options) {
    return Dialog(_extends({}, Dialog.currentOptions, {
        showCancelButton: true
    }, options));
};

Dialog.close = function() {
    queue.forEach(function(dialog) {
        dialog.close();
    });
    queue = [];
};

Dialog.setDefaultOptions = function(options) {
    Object.assign(Dialog.currentOptions, options);
};

Dialog.resetDefaultOptions = function() {
    Dialog.currentOptions = _extends({}, Dialog.defaultOptions);
};

Dialog.resetDefaultOptions();

exports.default = Dialog;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpYWxvZy5qcyJdLCJuYW1lcyI6WyJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsInF1ZXVlIiwiRGlhbG9nIiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicGFnZXMiLCJnZXRDdXJyZW50UGFnZXMiLCJjdHgiLCJkaWFsb2ciLCJzZWxlY3RDb21wb25lbnQiLCJzZWxlY3RvciIsInNldERhdGEiLCJvbkNhbmNlbCIsIm9uQ29uZmlybSIsInB1c2giLCJkZWZhdWx0T3B0aW9ucyIsInNob3ciLCJ0aXRsZSIsIm1lc3NhZ2UiLCJ6SW5kZXgiLCJvdmVybGF5IiwiYXN5bmNDbG9zZSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsInNob3dDb25maXJtQnV0dG9uIiwic2hvd0NhbmNlbEJ1dHRvbiIsImNsb3NlT25DbGlja092ZXJsYXkiLCJjb25maXJtQnV0dG9uT3BlblR5cGUiLCJhbGVydCIsImN1cnJlbnRPcHRpb25zIiwiY29uZmlybSIsImNsb3NlIiwiZm9yRWFjaCIsInNldERlZmF1bHRPcHRpb25zIiwicmVzZXREZWZhdWx0T3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxRQUFULEdBQW9CO0FBQUVBLGFBQVdDLE9BQU9DLE1BQVAsSUFBaUIsVUFBVUMsTUFBVixFQUFrQjtBQUFFLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJQyxVQUFVQyxNQUE5QixFQUFzQ0YsR0FBdEMsRUFBMkM7QUFBRSxVQUFJRyxTQUFTRixVQUFVRCxDQUFWLENBQWIsQ0FBMkIsS0FBSyxJQUFJSSxHQUFULElBQWdCRCxNQUFoQixFQUF3QjtBQUFFLFlBQUlOLE9BQU9RLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ0osTUFBckMsRUFBNkNDLEdBQTdDLENBQUosRUFBdUQ7QUFBRUwsaUJBQU9LLEdBQVAsSUFBY0QsT0FBT0MsR0FBUCxDQUFkO0FBQTRCO0FBQUU7QUFBRSxLQUFDLE9BQU9MLE1BQVA7QUFBZ0IsR0FBNVAsQ0FBOFAsT0FBT0gsU0FBU1ksS0FBVCxDQUFlLElBQWYsRUFBcUJQLFNBQXJCLENBQVA7QUFBeUM7O0FBRTdULElBQUlRLFFBQVEsRUFBWjs7QUFFQSxJQUFJQyxTQUFTLFNBQVNBLE1BQVQsQ0FBZ0JDLE9BQWhCLEVBQXlCO0FBQ3BDLFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQzVDLFFBQUlDLFFBQVFDLGlCQUFaO0FBQ0EsUUFBSUMsTUFBTUYsTUFBTUEsTUFBTWIsTUFBTixHQUFlLENBQXJCLENBQVY7QUFDQSxRQUFJZ0IsU0FBU0QsSUFBSUUsZUFBSixDQUFvQlIsUUFBUVMsUUFBNUIsQ0FBYjtBQUNBLFdBQU9ULFFBQVFTLFFBQWY7O0FBRUEsUUFBSUYsTUFBSixFQUFZO0FBQ1ZBLGFBQU9HLE9BQVAsQ0FBZXpCLFNBQVM7QUFDdEIwQixrQkFBVVIsTUFEWTtBQUV0QlMsbUJBQVdWO0FBRlcsT0FBVCxFQUdaRixPQUhZLENBQWY7QUFJQUYsWUFBTWUsSUFBTixDQUFXTixNQUFYO0FBQ0Q7QUFDRixHQWJNLENBQVA7QUFjRCxDQWZEOztBQWlCQVIsT0FBT2UsY0FBUCxHQUF3QjtBQUN0QkMsUUFBTSxJQURnQjtBQUV0QkMsU0FBTyxFQUZlO0FBR3RCQyxXQUFTLEVBSGE7QUFJdEJDLFVBQVEsR0FKYztBQUt0QkMsV0FBUyxJQUxhO0FBTXRCQyxjQUFZLEtBTlU7QUFPdEJYLFlBQVUsYUFQWTtBQVF0QlkscUJBQW1CLElBUkc7QUFTdEJDLG9CQUFrQixJQVRJO0FBVXRCQyxxQkFBbUIsSUFWRztBQVd0QkMsb0JBQWtCLEtBWEk7QUFZdEJDLHVCQUFxQixLQVpDO0FBYXRCQyx5QkFBdUI7QUFiRCxDQUF4Qjs7QUFnQkEzQixPQUFPNEIsS0FBUCxHQUFlLFVBQVUzQixPQUFWLEVBQW1CO0FBQ2hDLFNBQU9ELE9BQU9kLFNBQVMsRUFBVCxFQUFhYyxPQUFPNkIsY0FBcEIsRUFBb0M1QixPQUFwQyxDQUFQLENBQVA7QUFDRCxDQUZEOztBQUlBRCxPQUFPOEIsT0FBUCxHQUFpQixVQUFVN0IsT0FBVixFQUFtQjtBQUNsQyxTQUFPRCxPQUFPZCxTQUFTLEVBQVQsRUFBYWMsT0FBTzZCLGNBQXBCLEVBQW9DO0FBQ2hESixzQkFBa0I7QUFEOEIsR0FBcEMsRUFFWHhCLE9BRlcsQ0FBUCxDQUFQO0FBR0QsQ0FKRDs7QUFNQUQsT0FBTytCLEtBQVAsR0FBZSxZQUFZO0FBQ3pCaEMsUUFBTWlDLE9BQU4sQ0FBYyxVQUFVeEIsTUFBVixFQUFrQjtBQUM5QkEsV0FBT3VCLEtBQVA7QUFDRCxHQUZEO0FBR0FoQyxVQUFRLEVBQVI7QUFDRCxDQUxEOztBQU9BQyxPQUFPaUMsaUJBQVAsR0FBMkIsVUFBVWhDLE9BQVYsRUFBbUI7QUFDNUNkLFNBQU9DLE1BQVAsQ0FBY1ksT0FBTzZCLGNBQXJCLEVBQXFDNUIsT0FBckM7QUFDRCxDQUZEOztBQUlBRCxPQUFPa0MsbUJBQVAsR0FBNkIsWUFBWTtBQUN2Q2xDLFNBQU82QixjQUFQLEdBQXdCM0MsU0FBUyxFQUFULEVBQWFjLE9BQU9lLGNBQXBCLENBQXhCO0FBQ0QsQ0FGRDs7QUFJQWYsT0FBT2tDLG1CQUFQO2tCQUNlbEMsTSIsImZpbGUiOiJkaWFsb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxyXG5cclxudmFyIHF1ZXVlID0gW107XHJcblxyXG52YXIgRGlhbG9nID0gZnVuY3Rpb24gRGlhbG9nKG9wdGlvbnMpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgdmFyIHBhZ2VzID0gZ2V0Q3VycmVudFBhZ2VzKCk7XHJcbiAgICB2YXIgY3R4ID0gcGFnZXNbcGFnZXMubGVuZ3RoIC0gMV07XHJcbiAgICB2YXIgZGlhbG9nID0gY3R4LnNlbGVjdENvbXBvbmVudChvcHRpb25zLnNlbGVjdG9yKTtcclxuICAgIGRlbGV0ZSBvcHRpb25zLnNlbGVjdG9yO1xyXG5cclxuICAgIGlmIChkaWFsb2cpIHtcclxuICAgICAgZGlhbG9nLnNldERhdGEoX2V4dGVuZHMoe1xyXG4gICAgICAgIG9uQ2FuY2VsOiByZWplY3QsXHJcbiAgICAgICAgb25Db25maXJtOiByZXNvbHZlXHJcbiAgICAgIH0sIG9wdGlvbnMpKTtcclxuICAgICAgcXVldWUucHVzaChkaWFsb2cpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuRGlhbG9nLmRlZmF1bHRPcHRpb25zID0ge1xyXG4gIHNob3c6IHRydWUsXHJcbiAgdGl0bGU6ICcnLFxyXG4gIG1lc3NhZ2U6ICcnLFxyXG4gIHpJbmRleDogMTAwLFxyXG4gIG92ZXJsYXk6IHRydWUsXHJcbiAgYXN5bmNDbG9zZTogZmFsc2UsXHJcbiAgc2VsZWN0b3I6ICcjdmFuLWRpYWxvZycsXHJcbiAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7orqQnLFxyXG4gIGNhbmNlbEJ1dHRvblRleHQ6ICflj5bmtognLFxyXG4gIHNob3dDb25maXJtQnV0dG9uOiB0cnVlLFxyXG4gIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLFxyXG4gIGNsb3NlT25DbGlja092ZXJsYXk6IGZhbHNlLFxyXG4gIGNvbmZpcm1CdXR0b25PcGVuVHlwZTogJydcclxufTtcclxuXHJcbkRpYWxvZy5hbGVydCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgcmV0dXJuIERpYWxvZyhfZXh0ZW5kcyh7fSwgRGlhbG9nLmN1cnJlbnRPcHRpb25zLCBvcHRpb25zKSk7XHJcbn07XHJcblxyXG5EaWFsb2cuY29uZmlybSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgcmV0dXJuIERpYWxvZyhfZXh0ZW5kcyh7fSwgRGlhbG9nLmN1cnJlbnRPcHRpb25zLCB7XHJcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlXHJcbiAgfSwgb3B0aW9ucykpO1xyXG59O1xyXG5cclxuRGlhbG9nLmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGRpYWxvZykge1xyXG4gICAgZGlhbG9nLmNsb3NlKCk7XHJcbiAgfSk7XHJcbiAgcXVldWUgPSBbXTtcclxufTtcclxuXHJcbkRpYWxvZy5zZXREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgT2JqZWN0LmFzc2lnbihEaWFsb2cuY3VycmVudE9wdGlvbnMsIG9wdGlvbnMpO1xyXG59O1xyXG5cclxuRGlhbG9nLnJlc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgRGlhbG9nLmN1cnJlbnRPcHRpb25zID0gX2V4dGVuZHMoe30sIERpYWxvZy5kZWZhdWx0T3B0aW9ucyk7XHJcbn07XHJcblxyXG5EaWFsb2cucmVzZXREZWZhdWx0T3B0aW9ucygpO1xyXG5leHBvcnQgZGVmYXVsdCBEaWFsb2c7Il19